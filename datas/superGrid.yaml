#This was made to encompass a variety of perfect information 2D grid games that
#   share certain traits. Moves from a game are translated into a standardized
#   move template which can move a piece and/or place a piece onto the board
#   when necessary.
#_parentDatas:
#- turnBased

Game:
  serverParentClasses:
  - SuperGridGame
  attributes:
    rows:
      type: const int
      description: The number of cells on the board along the y (vertical) axis.
    cols:
      type: const int
      description: The number of cells on the board along the x (horizontal) axis.
    possiblePieces:
      type: const string
      description: The list of all abbreviated names for each piece that is in the game. Each piece should be represented by a single character.
    board:
      type: 
        name: list
        valueType:
          name: list
          valueType: string
      description: 2D list of what pieces are placed in cells on the board. Each piece should be one character. Space characters denote an empty cell.
    auxiliary:
      type: string[]
      description: All information needed for the repString that is not shared between all SuperGrid games. For example, the board and turn player info should not be in this list, but castling availability in chess would.
    repString:
      type: string
      description: A string describing all of the information necessary to fully represent the game's state.
    gameOverMessages:
      type: 
        name: dictionary
        keyType: int
        valueType: string
      description: Maps different endings of the game to specific game over messages.
    playerOrder:
      type: string[]
      description: Defines the order in which players take their turns. Each player name should be one character.
  functions:
    transition:
      description: Checks if move is valid, then updates the board and auxiliary accordingly. This function should not update the repString directly.
      #serverPredefined: true
      arguments:
      - name: move
        type: Move!
        description: The attempted move in a standardized SuperGridMove object.
      returns:
        type: boolean
        description: True if move is valid, False if move is not valid.
        invalidValue: false
    # updateRepString:
    #   description: Uses information from board and auxiliary to update the repString.
    convertSubmoveToMove:
      description: Translates move notation from the sub-game into the standardized SuperGridMove object.
      #serverPredefined: true
      arguments:
      - name: subMove
        type: string
        description: A string describing the move made in the sub-game's unique notation.
      returns:
        type: Move?
        description: Move in standardized SuperGridMove object.
        invalidValue: null
    isGameOver:
      description: Checks if the game should end.
      returns:
        type: int
        description: 0 if game is not over. Other values indicate how the game has ended via the gameOverMessages dictionary.
        invalidValue: 0

AI:
  functions:
    makeMove:
      description: This is called every time it is this AI.player's turn to make a move.
      returns:
        type: string
        description: A move that the AI wants to make. Format is "startX startY endX endY placedPiece placeX placeY"

Move:
  description: A move in any SuperGrid game in standardized notation.
  serverPredefined: true
  attributes:
    startX:
      type: int
      description: The x position of the piece that will be moved. Null if not used.
    startY:
      type: int
      description: The y position of the piece that will be moved. Null if not used.
    endX:
      type: int
      description: The x position of where the moving piece moved. Null if not used.
    endY:
      type: int
      description: The y position of where the moving piece moved. Null if not used.
    placedPiece:
      type: string
      description: The name of the piece that will be placed onto the board. Should be one character. Null if not used.
    placeX:
      type: int
      description: The x position of the piece that will be placed onto the board. Null if not used.
    placeY:
      type: int
      description: The y position of the piece that will be placed onto the board. Null if not used.
